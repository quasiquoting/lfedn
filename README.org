* lfedn – edn (extensible data notation) parser for LFE
lfeden is a parser for the [[https://github.com/edn-format/edn][edn specification]], implemented using [[http://www.erlang.org/doc/man/leex.html][leex]] and [[http://www.erlang.org/doc/man/yecc.html][yecc]]
and tested with [[http://www.erlang.org/doc/man/eunit.html][eunit]].

This is a low-level parser that parses edn into LFE data structures. You have to
decide on how, specifically, to represent them, since each user may have a
different need. There is no imposition here.

** Build
#+BEGIN_SRC sh
$ rebar3 compile
#+END_SRC

** Test
#+BEGIN_SRC sh
$ rebar3 eunit
#+END_SRC

** Examples
See [[file:EXAMPLES.org][EXAMPLES.org]]
** API
[[http://quasiquoting.org/lfedn][Documentation]]

** Type Mappings
| edn                     | LFE                                          |
|-------------------------+----------------------------------------------|
| boolean                 | boolean                                      |
| char                    | string                                       |
| float                   | float                                        |
| integer                 | integer                                      |
| keyword[fn:keyword-nil] | atom                                         |
| list                    | list                                         |
| map                     | tagged list ⇒ ~`#(map [#(,key1 ,val1) ...])~ |
| ~nil~ (symbol)          | ~nil~ (atom)                                 |
| set[fn:set-uniqueness]  | tagged list ⇒ ~#(set [...])~                 |
| string                  | binary string (utf-8)                        |
| symbol                  | atom                                         |
| tagged literal          | tagged tuple ⇒ ~`#(tag ,symbol ,value)~      |
| vector                  | tagged list ⇒ ~#(vector [...])~              |

[fn:keyword-nil] Although keyword ↦ atom, ~:nil~ ↦ ~#(keyword nil)~.
[fn:set-uniqueness] Uniqueness is not checked at parse time.

** To LFE Mappings
The ~to-lfe~ function transforms incoming data structures to be more
LFE-friendly, but the results can't be converted back to string without
transforming again. The default mappings are:

| edn            | LFE                                                  |
|----------------+------------------------------------------------------|
| boolean        | boolean                                              |
| char           | string                                               |
| float          | float                                                |
| integer        | integer                                              |
| keyword        | atom                                                 |
| list           | list                                                 |
| map            | [[http://www.erlang.org/doc/man/dict.html][dict]]                                                 |
| ~nil~ (symbol) | ~nil~ (atom)                                         |
| set            | [[http://www.erlang.org/doc/man/sets.html][set]]                                                  |
| string         | binary string                                        |
| symbol         | atom                                                 |
| tagged literal | call registered handler for tag or fail if not found |
| vector         | list                                                 |

** Authors
[[https://github.com/marianoguerra][marianoguerra]] (Erlang) and [[https://github.com/yurrriq][yurrriq]] (LFE)

** License
[[file:LICENSE][MIT]]
